{"version":3,"sources":["reducers.js","components/Card.js","components/CardList.js","components/Searchbox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","actions.js","constants.js","index.js"],"names":["initialStateSearch","searchfield","initialStateRobots","isPending","robots","error","Card","name","email","id","className","src","alt","CardList","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundry","state","hasError","info","this","setState","Component","App","onRequestRobots","onSearchChange","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c1585b27.chunk.js","sourcesContent":["import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBORS_PENDING,\r\n    REQUEST_ROBORS_SUCCESS,\r\n    REQUEST_ROBORS_FAILED\r\n} from './constants';\r\nconst initialStateSearch = {\r\n    searchfield: ''\r\n}\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n    switch (action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, { searchfield: action.payload })\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n    switch (action.type) {\r\n        case REQUEST_ROBORS_PENDING:\r\n            return Object.assign({}, state, { isPending: true });\r\n        case REQUEST_ROBORS_SUCCESS:\r\n            return Object.assign({}, state, { robots: action.payload, isPending: false });\r\n        case REQUEST_ROBORS_FAILED:\r\n            return Object.assign({}, state, { error: action.payload, isPending: false });\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n\r\n    return (\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img src={`https://robohash.org/${id}?size=200x200`} alt='robots' />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card'\r\n\r\nconst CardList = ({ robots }) => {\r\n    return (\r\n        <div>\r\n            {\r\n                robots.map((user, i) => {\r\n                    return (<Card\r\n                        key={i}\r\n                        id={robots[i].id}\r\n                        name={robots[i].name}\r\n                        email={robots[i].email}\r\n                    />\r\n                    );\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input\r\n                className='pa3 ba b--green bg-lightest-blue'\r\n                type='search'\r\n                placeholder='search Robots'\r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{ overflow: 'scroll', border: '1px solid black', height: '800px' }}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n};\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor(props) {\r\n        super();\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({ hasError: true })\r\n    }\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>Oooooooops. That is not good</h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/Searchbox';\r\nimport './App.css'\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport { setSearchField, requestRobots } from '../actions';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchfield: state.searchRobots.searchfield,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    }\r\n}\r\n\r\n\r\nconst MapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: () => dispatch(requestRobots())\r\n    }\r\n}\r\nclass App extends Component {\r\n    componentDidMount() {\r\n        this.props.onRequestRobots();\r\n    }\r\n    // onSearchChange = (event) => {\r\n    //     this.setState({ searchfield: event.target.value })\r\n    // };\r\n    render() {\r\n\r\n        const { searchfield, onSearchChange, robots, isPending } = this.props;\r\n        const filteredRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n        })\r\n        return (\r\n\r\n            <div className='tc'>\r\n                <h1>RoboFriends</h1>\r\n                <SearchBox searchChange={onSearchChange} />\r\n                <Scroll>\r\n                    {isPending ? <h1 className='tc'>Loading...</h1> :\r\n\r\n                        <ErrorBoundry>\r\n                            <CardList robots={filteredRobots} />\r\n                        </ErrorBoundry>\r\n                    }\r\n                </Scroll>\r\n            </div >\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, MapDispatchToProps)(App);","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBORS_PENDING,\r\n    REQUEST_ROBORS_SUCCESS,\r\n    REQUEST_ROBORS_FAILED\r\n} from './constants';\r\n\r\n\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({ type: REQUEST_ROBORS_PENDING })\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(data => dispatch({ type: REQUEST_ROBORS_SUCCESS, payload: data }))\r\n        .catch(error => dispatch({ type: REQUEST_ROBORS_FAILED, payload: error }))\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD'\r\nexport const REQUEST_ROBORS_PENDING = 'REQUEST_ROBORS_PENDING'\r\nexport const REQUEST_ROBORS_SUCCESS = 'REQUEST_ROBORS_SUCCESS'\r\nexport const REQUEST_ROBORS_FAILED = 'REQUEST_ROBORS_FAILED'","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport { createLogger } from 'redux-logger';\nimport 'tachyons';\nimport { searchRobots, requestRobots } from './reducers';\n\n//import CardList from './CardList'\nimport App from './containers/App';\n// import * as serviceWorker from './serviceWorker';\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots })\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}